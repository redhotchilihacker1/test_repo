import xml.etree.ElementTree as ET
import pandas as pd
from bs4 import BeautifulSoup
import sys

# CVSS puanını hesaplamak için fonksiyon
def calculate_cvss_v2_score(cvss_vector):
    # CVSS v2.0 bileşenlerinin varsayılan değerleri
    metrics = {
        'AV': {'N': 0.85, 'A': 0.62, 'L': 0.55},
        'AC': {'L': 0.77, 'H': 0.44},
        'Au': {'N': 0.85, 'S': 0.56},
        'C': {'N': 0.0, 'P': 0.5, 'C': 1.0},
        'I': {'N': 0.0, 'P': 0.5, 'C': 1.0},
        'A': {'N': 0.0, 'P': 0.5, 'C': 1.0}
    }
    
    # CVSS vektörünü parçala
    if not cvss_vector.startswith("CVSS2#"):
        return "N/A"  # Geçersiz vektör

    components = cvss_vector[6:].split('/')
    
    if len(components) < 6:
        return "N/A"  # Geçersiz vektör

    # Bileşenleri al
    av = components[0].split(':')[1]
    ac = components[1].split(':')[1]
    au = components[2].split(':')[1]
    c = components[3].split(':')[1]
    i = components[4].split(':')[1]
    a = components[5].split(':')[1]

    # Hesapla
    base_score = round(
        (0.5 * (metrics['AV'][av] + metrics['AC'][ac] + metrics['Au'][au]) +
        (metrics['C'][c] + metrics['I'][i] + metrics['A'][a]) * 0.5),
        1
    )
    return min(max(base_score, 0), 10)  # Puanı 0-10 arasında sınırlı tut

# Kullanıcıdan dosya yolunu ve kaydedilecek dosya adını al
if len(sys.argv) != 3:
    print("Kullanım: python script.py <input.nessus> <output_filename>")
    sys.exit(1)

nessus_file = sys.argv[1]
output_filename = sys.argv[2]

# Nessus dosyasını yükle ve BeautifulSoup ile ayrıştır
with open(nessus_file, 'r', encoding='utf-8') as file:
    content = file.read()
    soup = BeautifulSoup(content, 'xml')  # XML olarak ayrıştır

# Verileri tutmak için listeler
data = []

# Risk Factor önceliklerini tanımla
risk_order = {
    "Critical": 1,
    "High": 2,
    "Medium": 3,
    "Low": 4,
    "None": 5  # "None" olanları en sona eklemek için
}

# Nessus dosyasındaki her host'u işle
for report_host in soup.find_all("ReportHost"):
    dns_name = report_host.get('name')
    ip_address = None
    
    for tag in report_host.find_all("tag"):
        if tag.get('name') == 'host-ip':
            ip_address = tag.text
    
    # Her host'un zafiyetlerini bul
    for report_item in report_host.find_all("ReportItem"):
        plugin_name = report_item.get('pluginName', 'N/A')
        synopsis = report_item.find('synopsis').text if report_item.find('synopsis') else 'N/A'
        description = report_item.find('description').text if report_item.find('description') else 'N/A'
        see_also = report_item.find('see_also').text if report_item.find('see_also') else 'N/A'
        solution = report_item.find('solution').text if report_item.find('solution') else 'N/A'
        risk_factor = report_item.find('risk_factor').text if report_item.find('risk_factor') else 'N/A'
        
        # Risk Factor "None" ise bu satırı atla
        if risk_factor == "None":
            continue
        
        # Port/Service/Protocol değerlerini al
        port = report_item.get('port', 'N/A')
        svc_name = report_item.get('svc_name', 'N/A')
        protocol = report_item.get('protocol', 'N/A')
        
        # Port 0 ise N/A olarak ayarla
        if port == '0':
            port = 'N/A'
        
        # Birleştir ve formata uygun hale getir
        port_service_protocol = f"{port}/{svc_name}/{protocol}"
        
        # CVSS değerini al
        cvss_vector = report_item.find('cvss_vector').text if report_item.find('cvss_vector') else 'N/A'
        
        # CVSS puanını hesapla
        cvss_score = calculate_cvss_v2_score(cvss_vector) if 'CVSS2#' in cvss_vector else 'N/A'
        
        # Verileri bir satır olarak kaydet
        data.append({
            'DNS Name': dns_name,
            'IP': ip_address,
            'Vulnerability': plugin_name,
            'Synopsis': synopsis,
            'Description': description,
            'References': see_also,
            'Solution': solution,
            'Risk Factor': risk_factor,
            'Port/Service/Protocol': port_service_protocol,
            'CVSS Vector': cvss_vector,
            'CVSS Score': cvss_score
        })

# Verileri pandas DataFrame'e dönüştür
df = pd.DataFrame(data)

# Risk Factor'e göre sıralama yap
df['Risk Factor Order'] = df['Risk Factor'].map(risk_order)
df = df.sort_values(by='Risk Factor Order').drop(columns='Risk Factor Order')

# CSV olarak kaydet
csv_output = f'{output_filename}.csv'
df.to_csv(csv_output, index=False)

# XLSX olarak kaydet
xlsx_output = f'{output_filename}.xlsx'
df.to_excel(xlsx_output, index=False)

print(f"CSV kaydedildi: {csv_output}")
print(f"XLSX kaydedildi: {xlsx_output}")
